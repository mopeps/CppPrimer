#+title: Strings, vectors, and Arrays

The built-in types till covered until now are defined directly by the C++ lang. These types
represent facilities present in most computer hardware, such as numbers and chars.

On this Chapter, we a re going to focus on 'higher-level' types provided by the standard library,
such as vectors and strings.

*  Namespace using declarations
Having to explicitly indicate whether or not a library name we use is in the std namespace can be a
bit annoying and cumbersome. Luckily, there is an easier way to use namespace members.

We can use the declaration =using= which lets us use a name from a namespace without qualifying
the name with *namespace_name::* prefix.

#+begin_src C++
  using namespace::name; // The form of an usual using declaration
#+end_src

An example of the using namespace would be the following:

#+begin_src C++

  #include <iostream>

  using std::cin; // Now there is no need to add std:: before cin or cout

  int main() {
	int i;
	cin >> i;
	cout << i;
	std::cout << i; // even if there is no need, we can still use std:: explicitly
	return 0;
	}
#+end_src

* String Library

A string is a variable length sequence of characters. To use this type in C++, we must include the
string header. Because it is part of the library, *string* is defined in the std namespace.

** Definition and initialization

The string class can be initialized in more than one way.

#+begin_src C++
  #include <string>
  using std::string;

	string s1;          // Default initialization, s1 is an empty string
	string s2(s1);      // s2 is initialized as a copy from s1
	string s3 = s1;     // s3 is initialized as a copy from s1
	string s4("value"); // s4 is a copy of the string literal with value "value"
	string s5 = "value";// s5 is a copy of the string literal with value "value"
	string s6(n, 'c');  // s6 initializes a string with n copies of the character 'c'

#+end_src

Something important about these ways of initializing a string, is that they can be direct forms or
copy forms of initialization. When we initialize a variable using *=*, we are asking the compiler to
copy initialize the object by copying the initializer on the right-hand side into the object being
created. Otherwise, when we omit the =, we use *direct initialization*.

** Operations on strings
Along with defining how objects are initialized, a class also defines operations that the objects of
the class type can perform. 

*** Reading and writing
